// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id               String       @id @default(cuid())
    name             String?
    email            String?      @unique
    emailVerified    DateTime?
    phone            String?
    image            String?
    role             Role         @default(USER)
    credits          Int          @default(0)
    key              String?      @unique
    uid              String?
    token            String?      @db.Text
    stripeCustomerId String?
    plan             Int          @default(1)
    accounts         Account[]
    sessions         Session[]
    request          Request[]
    UserTokens       UserTokens[]
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt

    @@index([key])
}

enum Role {
    USER
    ADMIN
}

model Request {
    id          String   @id @default(cuid())
    countryCode String
    number      String
    method      Method
    type        Type
    time        DateTime @db.DateTime()
    amount      Int
    result      Result
    reason      String?
    fallback    Boolean  @default(false)
    message     String?
    User        User     @relation(fields: [userId], references: [id])
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum Method {
    WO
    WU
    WM
    SMS
}

enum Type {
    OTP
    TEXT
    CHECK
    MEDIA
}

enum Result {
    SUCCESS
    FAILED
}

model UserTokens {
    id           Int      @id @default(autoincrement())
    instanceId   String?  @unique
    connected    Boolean
    subscription String   @unique
    User         User     @relation(fields: [userId], references: [id])
    userId       String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model AuthTokens {
    id         String   @id @default(cuid())
    uid        String
    instanceId String
    connected  Boolean  @default(true)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model CheckTokens {
    id         String   @id @default(cuid())
    uid        String
    instanceId String
    connected  Boolean  @default(true)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Price {
    id        Int      @id @default(autoincrement())
    code      Int
    method    Method
    type      Type
    price     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([code, method, type])
    @@index([code])
}
